openapi: 3.0.1
info:
  title: 'E-commerce REST API '
  version: 1.0.0
  description: A basic API for working a basic back end e-commerce server
paths:
  /users:
    summary: Requests to this path will query users data from the database
    description: 'Path will handle requests related to data in the users table. '
    get:
      summary: Get all users
      description: Will return all user data from the database
      operationId: get_users
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Users Array:
                  value: |-
                    [
                      {
                          "id": "755f877a-5dee-41bc-a88b-755f2b87070a",
                          "email": "jerico@jerico.com",
                          "username": "jericojerico",
                          "password": "$2b$10$Q5NN5vuXM8L7TbQ/wrDwme8db7c7D2GdZz/ZSdxdP63O676MMNZMu"
                      },
                      {
                          "id": "a35e1d15-835f-4fde-9c85-4642ed481f2d",
                          "email": "jerico.cabatingan@example.com",
                          "username": "jerico.cabatingan",
                          "password": "$2b$10$a9SQALC3dZpE.NkzzDdeYejf4YqjRTVWE1kIGuteZP5J9c1uHUwhy"
                      }
                    ]
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error Details
      tags:
        - Users
  /products:
    summary: Products data
    description: Requests to this path will query products data.
    get:
      summary: Get products
      description: >-
        This operation will return products from the items table. Results can be filtered by category and item name and will be ordered in ascending order by price. An empty query
        string will return all products.
      operationId: get_products
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Items Array:
                  value: |-
                    [
                      {
                          "id": "1",
                          "name": "T-shirt",
                          "category": "Tools",
                          "price": "$15.99"
                      },
                      {
                          "id": "2",
                          "name": "Hammer",
                          "category": "Food",
                          "price": "$19.00"
                      }
                    ]
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error details
      tags:
        - Products
    post:
      summary: Create new product
      description: >-
        Product data will be parsed form the request body and correctly
        formatted before adding to the database.
      operationId: post_products
      requestBody:
        description: Item Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Created
          content:
            text/plain; charset=utf-8:
              examples:
                New item:
                  value: |-
                    Your product was created:
                      id: 30
                      name: Salt Lamp
                      category: Household
                      price: 18.49
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: Error details
      tags:
        - Products
  /carts:
    summary: Requests to this path will query cart_items data from teh database.
    description: 'Path will handle requests made related to data in the  cart_items table. '
    post:
      summary: Create new cart
      description: >-
        This operation will create a new cart with a unique id which will be
        asociated with a specific users id.
      operationId: post_cart
      responses:
        '201':
          description: Created
          content:
            text/plain; charset=utf-8:
              examples:
                New Cart:
                  value: |-
                    Cart created.
                     id: eefd24b1-0f76-4375-a0b7-3645611166fe
                     user_id: 229535de-1a96-463f-86c3-767f46e1ddc9
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error object details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
      tags:
        - Carts
  /login:
    summary: Requests to this path are related to authentication and authorisation.
    description: 'Path will handle requests for logging in users. '
    post:
      summary: User log-in
      description: >-
        Users credentials will be extracted from the request body and checked
        against the database. If data matches then a session is started and user
        is granted access to their protected resources. Passport.js local strategy can deduce if either username or password is incorrect in the console and will redirect you to the homepage if so.
      operationId: post_login
      requestBody:
        description: Item Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login_details'
      responses:
        '302':
          description: Redirect to /profile
          content:
            text/plain; charset=utf-8:
              examples:
                Login Details:
                  value: |-
                    request.session.passport: {}
                    request.user: {}
      tags:
        - Authentication
  /logout:
    summary: Requests to this path will log users out.
    description: >-
      Path will terminate user session and redirect users away from protected
      resources. 
    get:
      summary: User log-out
      description: >-
        This will terminate the current session and redirect the user to the
        home page.
      operationId: get_logout
      responses:
        '200':
          description: Ok
          content:
            text/plain; charset=utf-8:
              examples:
                Success message:
                  value: 'Authenticated: false'
        '302':
          description: Redirect to /profile
          content:
            text/plain; charset=utf-8:
              examples:
                Login Details:
                  value: |-
                      Welcome to my Node.js, Express, and Postgres API app. Please authenticate to proceed.
      tags:
        - Authentication
  /users/register:
    summary: >-
      Requests to this path are related to adding new user information to the
      database.
    description: 'Path will return resources for the registration of new users. '
    post:
      summary: Register a new user
      description: >-
        Given data is properly formatted, it will be parsed from the request
        body and it will be added to the database. An error will be thrown if
        you attempt to registar an existing username/email.
      operationId: post_register
      requestBody:
        description: User Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            text/plain; charset=utf-8:
              examples:
                New user:
                  value: 'New user: "new.user" created.'
        '400':
          description: Bad Request
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: Error details
      tags:
        - Users
  /users/{id}:
    summary: Specific user
    description: Requests to this path will query a single user by id.
    get:
      summary: Get specific user
      description: >-
        Extract the id parameter and use it to return a the matching users data
        from the database.
      operationId: get_users_by_id
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                User info:
                  value: |-
                    {
                        "id": "100",
                        "email": "onehundred",
                        "username": "onehundred@example.com",
                        "password": "$2b$10$WgPzO5g6UCFlmpnUxd8m1evthPIf4E.dw/pWy8cGscUyMbaAJaScu"
                    }
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
        '404':
          description: Not Found
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: User does not exist
      tags:
        - Users
    put:
      summary: Update specific user
      description: >-
        This operation will extract new data from the request body and make sure
        it is properly formatted before updating the user whos id matches the id
        parameter. 
      operationId: put_users_by_id
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: User Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Ok
          content:
            text/plain; charset=utf-8:
              examples:
                Updated user:
                  value: |-
                    User with ID: 100 was updated to:
                     email: hundred@example.com
                     username: hundred
                     password: $2b$10$cZ7b5bSkDDgQpL3ftyIXZ.UtCDB8otOUqDfb1QRMw7THgXtSzkW..'
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
        '404':
          description: Not Found
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: User does not exist
      tags:
        - Users
  /products/{id}:
    summary: Product data
    description: Requests will query a single product by id.
    get:
      summary: Get a product
      description: >-
        This will extract the id parameter and use it to return the matching
        item from the database. An error is thrown if id is not found. 
      operationId: get_products_by_id
      parameters:
        - name: id
          in: path
          description: Item ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Item:
                  value: |-
                    {
                      "id": "30",
                      "name": "Salt Lamp",
                      "category": "Household",
                      "price": "$18.49"
                    }
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: Error details
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Item does not exist
      tags:
        - Products
    delete:
      summary: Delete a product
      description: >-
        Product matching the id parameter will be deleted from the database. An
        error will be thrown if id is not found.
      operationId: delete_products_by_id
      parameters:
        - name: id
          in: path
          description: Item ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No content
          content:
            text/plain; charset=utf-8:
              examples:
                Success message:
                  value: 'Item with ID: 100 was removed'
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: 'Item with ID: 100 was not found'
      tags:
        - Products
    put:
      summary: Update product info
      description: >-
        New product data will be parsed from the request body and correctly
        formatted before replacing the old product's details in the database. An
        error is thrown if data isnt properly formatted.
      operationId: put_products_by_id
      parameters:
        - name: id
          in: path
          description: Item ID
          required: true
          schema:
            type: string
      requestBody:
        description: Item Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Ok
          content:
            text/plain; charset=utf-8:
              examples:
                Updated Item:
                  value: |-
                    Item with ID: 100 was updated to:
                      name: Fake Hundred Dollar Bill
                      category: Toys
                      price: 100
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error Message:
                  value: Error details
        '404':
          description: Not found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: 'Item with ID: 100 was not found'
      tags:
        - Products
  /carts/{id}:
    summary: Edit specific cart
    description: Requests to this path will modify a specific cart.
    post:
      summary: Add item to cart
      description: >-
        Item id will be parsed from the request body and asociated to the cart
        whos id matches the id parameter inside the database. 
      operationId: post_item_by_carts_id
      parameters:
        - name: id
          in: path
          description: Cart ID
          required: true
          schema:
            type: string
      requestBody:
        description: Item Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart_item'
      responses:
        '201':
          description: Created
          content:
            application/json:
              examples:
                Updated Cart:
                  value: >-
                    { "cart_id": "string", "user_id": "string", "items": [{"id":
                    "string"}] }
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error object details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
      tags:
        - Carts
    delete:
      summary: Delete cart item
      description: >-
        Item id will be parsed from the request body and used to delete that
        item from the cart with the matching id parameter from the database.
      operationId: delete_item_by_carts_id
      parameters:
        - name: id
          in: path
          description: Cart ID
          required: true
          schema:
            type: string
      requestBody:
        description: Item Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart_item'
      responses:
        '200':
          description: No Content
          content:
            text/plain; charset=utf-8:
              examples:
                Success message:
                  value: 'Item with ID: "id" is was removed from cart with id: "id"'
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error object details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
        '404':
          description: Not Found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: 'Item with ID: "id" is not in cart with id: "id"'
      tags:
        - Carts
    get:
      summary: Retrieve a specific cart
      description: 'Retrieve a specific cart from the database using the id parameter. '
      operationId: get_carts_by_id
      parameters:
        - name: id
          in: path
          description: The id of the cart
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Cart instance:
                  value: |-
                    [
                        {
                            "id": "100",
                            "name": "Fake Hundred Dolla Bill",
                            "category": "Toys",
                            "price": "$100.00",
                            "item_id": "100",
                            "cart_id": "eefd24b1-0f76-4375-a0b7-3645611166fe"
                        },
                        {
                            "id": "17",
                            "name": "Alarm Clock",
                            "category": "Household",
                            "price": "$8.45",
                            "item_id": "17",
                            "cart_id": "eefd24b1-0f76-4375-a0b7-3645611166fe"
                        }
                    ]
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
        '404':
          description: Not Found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Cart not found.
      tags:
        - Carts
  /carts/{id}/checkout:
    summary: Create order
    description: >-
      Retrieve cart by id, create a new order with the given items and delete
      the cart
    post:
      summary: Create new order
      description: >-
        Validate cart existence. Process payment and ensure that details are
        accurate. Create a new order containing cart items of a specific id and
        add it to the database. Afterwards, delete the old cart.
      operationId: post_carts_checkout
      parameters:
        - name: id
          in: path
          description: Cart ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            text/plain; charset=utf-8:
              examples:
                New Order Object:
                  value: You have been charged a total of $32.93
        '400':
          description: Server error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error details.
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
      tags:
        - Orders
  /orders:
    summary: Order data
    description: Manipulate orders data
    get:
      summary: Return order history
      description: >-
        Will check if user is authenticated and will retrieve the users order
        history using user id saved in session store.
      operationId: get_orders
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Order history:
                  value:
                    orders:
                      - id: string
                        cart_id: string
                        items: {}
                        total_price: 0
                      - id: string
                        cart_id: string
                        items: {}
                        total_price: 0
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error Details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
      tags:
        - Orders
  /orders/{id}:
    summary: Get an order
    description: Retrieve an order by id
    get:
      summary: Get order
      description: Retrieve order from the database using id parameter
      operationId: get_orders_by_id
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              examples:
                Order instance:
                  value: |-
                    {
                      "id": "string",
                      "cart_id": "string",
                      "items": {},
                      "total_price": 0
                    }
        '400':
          description: Database Error
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Error Details
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
        '404':
          description: Not Found
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: 'Order: ''id'' not found.'
      tags:
        - Orders
  /profile:
    summary: User profile
    description: This endpoint serves request for a logged in user
    get:
      summary: Get user profile.
      description: >-
        User will be redirected here on a successful login reuqest. Then their session
        details are parsed from the request object and
        displayed
      operationId: get_profile
      responses:
        '200':
          description: Default error sample response
          content:
            text/plain; charset=utf-8:
              examples:
                Success message:
                  value: |-
                    You are logged in as 

                    id: request.user

                    username: request.session.passport.user.username
        '401':
          description: Unauthorized
          content:
            text/plain; charset=utf-8:
              examples:
                Error message:
                  value: Authorisation required.
      tags:
        - Authentication
  /:
    summary: Home
    description: Default page for the app
    get:
      summary: Get home page
      description: >-
        This is the homepage of the app. Users will be redirected here if they
        try to access protected resources when they are not signed in.
      operationId: get_homepage
      responses:
        '200': 
          description: Welcome message
          content:
            text/plain; charset=utf-8:
              examples:
                Success message:
                  value: Welcome to my Node.js, Express, and Postgres API app. Please authenticate to proceed.
      tags:
        - Home
components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
      xml:
        name: User
    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        price:
          type: number
      xml:
        name: Item
    Cart_item:
      type: object
      properties:
        id:
          type: string
      xml:
        name: Cart_item
    Login_details:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: Login_details
